import { useEffect } from "react";
import styles from "./AboutComplex.module.scss";

import { useSelector, useDispatch } from "react-redux";
import type { RootState, AppDispatch } from "../../store";
import { fetchComplexInfo } from "../../store/slices/aboutComplexSlice";
import { selectInfoLength } from "../../store/slices/aboutComplexSlice";
import { toggleTheme } from "../../store/slices/themeSlice";

import {
  incrementViews,
  selectPopularSections,
  selectTotalViews,
} from "../../store/slices/AboutViewsSlices";

const AboutComplex = () => {
  const dispatch = useDispatch<AppDispatch>();
  const info = useSelector((state: RootState) => state.about.info);
  const loading = useSelector((state: RootState) => state.about.loading);
  const infoLength = useSelector(selectInfoLength);
  const theme = useSelector((state: RootState) => state.theme.mode);

  const totalViews = useSelector(selectTotalViews);
  const popularSections = useSelector(selectPopularSections);

  useEffect(() => {
    dispatch(incrementViews("intro"));
  }, [dispatch]);

  useEffect(() => {
    dispatch(fetchComplexInfo());
  }, [dispatch]);

  return (
    <div
      className={`${styles.aboutPage} ${
        theme === "dark" ? styles.dark : styles.light
      }`}
    >
      <h1 className={styles.title}>–û –∫–æ–º–ø–ª–µ–∫—Å–µ</h1>
      <p className={styles.description}>{loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : info}</p>
      <p className={styles.infoLength}>–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {infoLength} —Å–∏–º–≤–æ–ª–æ–≤</p>
      <button onClick={() => dispatch(toggleTheme())}>
        {" "}
        –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –Ω–∞ {theme === "light" ? "—Ç—ë–º–Ω—É—é" : "—Å–≤–µ—Ç–ª—É—é"}
      </button>

      <div>
        <p>üëÄ –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {totalViews}</p>
        <p>üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ–∫—Ü–∏–∏:</p>
        <ul>
          {popularSections.map((s) => (
            <li key={s.section}>
              {s.section} ‚Äî {s.views}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default AboutComplex;
